import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import typescript from '@rollup/plugin-typescript';
import json from '@rollup/plugin-json';
import babel from "@rollup/plugin-babel";
import { terser } from 'rollup-plugin-terser';
import external from 'rollup-plugin-peer-deps-external';
import scss from 'rollup-plugin-scss';
// import postcss from 'rollup-plugin-postcss'
import { getFiles } from './scripts/getFiles';

const packageJson = require('./package.json');

const extensions = ['.js', '.ts', '.jsx', '.tsx'];

export default {
    input: [
        ...getFiles('./src/components', extensions),
        ...getFiles('./src/icon', extensions),
        ...getFiles('./src/JSDC', extensions),
        ...getFiles('./src/style', extensions),
        ...getFiles('./src/utils', extensions),
        ...getFiles('./src/hooks', extensions),
    ],
    output: {
        format: 'esm',
        sourcemap: true,
        dir: packageJson.module,
        name: 'jsdc-dui',
        preserveModules: true,
        preserveModulesRoot: 'src',
    },
    plugins: [
        external(),
        resolve(),
        commonjs(),
        json(),
        typescript({
            tsconfig: './tsconfig.json',
            declaration: true,
            declarationDir: 'dist',
        }),
        scss({
            output: packageJson.module + '/style/index.css',
            failOnError: true,
            outputStyle: "compressed" 
        }),
        // sass(),
        terser(),
        // postcss({
        //     config: {
        //         path: "./postcss.config.js",
        //     },
        //     extensions: [".css", ".scss"],
        //     use: ['sass'],
        //     minimize: true,
        //     inject: {
        //         insertAt: "top",
        //     },
        // }),
        // {
        //     name: 'Custom Rollup Plugin`',
        //     generateBundle: (options, bundle) => {
        //         Object.entries(bundle).forEach(entry => {
        //             // early return if the file we're currently looking at doesn't need to be acted upon by this plugin
        //             if (!entry[0].match(/.*(.scss.js)$/)) {
        //                 return;
        //             }
        //             // this line only runs for .scss.js files, which were generated by the postcss plugin.
        //             // depending on the use-case, the relative path to style-inject might need to change
        //             bundle[entry[0]].code = entry[1].code.replace(
        //                 /(".*node_modules\/style-inject\/dist\/style-inject\.es\.js")/,
        //                 ' "style-inject"',
        //             );
        //         });
        //     },
        // },
        babel({
            babelHelpers: "bundled",
            exclude: "node_modules/**",
        })
    ],
    external: ["react", "react-dom", "style-inject"]
}