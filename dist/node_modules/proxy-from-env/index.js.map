{"version":3,"file":"index.js","sources":["../../../node_modules/proxy-from-env/index.js"],"sourcesContent":["'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  ftp: 21,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443,\n};\n\nvar stringEndsWith = String.prototype.endsWith || function(s) {\n  return s.length <= this.length &&\n    this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string|object} url - The URL, or the result from url.parse.\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n  var proto = parsedUrl.protocol;\n  var hostname = parsedUrl.host;\n  var port = parsedUrl.port;\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n    return '';  // Don't proxy URLs without a valid scheme or host.\n  }\n\n  proto = proto.split(':', 1)[0];\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  hostname = hostname.replace(/:\\d*$/, '');\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n  if (!shouldProxy(hostname, port)) {\n    return '';  // Don't proxy URLs that match NO_PROXY.\n  }\n\n  var proxy =\n    getEnv('npm_config_' + proto + '_proxy') ||\n    getEnv(proto + '_proxy') ||\n    getEnv('npm_config_proxy') ||\n    getEnv('all_proxy');\n  if (proxy && proxy.indexOf('://') === -1) {\n    // Missing scheme in proxy, default to the requested URL's scheme.\n    proxy = proto + '://' + proxy;\n  }\n  return proxy;\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {string} hostname - The host name of the URL.\n * @param {number} port - The effective port of the URL.\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(hostname, port) {\n  var NO_PROXY =\n    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n  if (!NO_PROXY) {\n    return true;  // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false;  // Never proxy if wildcard is set.\n  }\n\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\n    if (!proxy) {\n      return true;  // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true;  // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;\n"],"names":["parseUrl","require$$0","parse","DEFAULT_PORTS","ftp","gopher","http","https","ws","wss","stringEndsWith","String","prototype","endsWith","s","length","this","indexOf","getEnv","key","process","env","toLowerCase","toUpperCase","proxyFromEnv","getProxyForUrl","url","parsedUrl","proto","protocol","hostname","host","port","split","NO_PROXY","every","proxy","parsedProxy","match","parsedProxyHostname","parsedProxyPort","parseInt","test","charAt","slice","call","shouldProxy","replace"],"mappings":"mIAEA,IAAIA,EAAWC,EAAeC,MAE1BC,EAAgB,CAClBC,IAAK,GACLC,OAAQ,GACRC,KAAM,GACNC,MAAO,IACPC,GAAI,GACJC,IAAK,KAGHC,EAAiBC,OAAOC,UAAUC,UAAY,SAASC,GACzD,OAAOA,EAAEC,QAAUC,KAAKD,SACuB,IAA7CC,KAAKC,QAAQH,EAAGE,KAAKD,OAASD,EAAEC,SAwFpC,SAASG,EAAOC,GACd,OAAOC,QAAQC,IAAIF,EAAIG,gBAAkBF,QAAQC,IAAIF,EAAII,gBAAkB,GAG7EC,EAAAC,eApFA,SAAwBC,GACtB,IAAIC,EAA2B,iBAARD,EAAmB1B,EAAS0B,GAAOA,GAAO,GAC7DE,EAAQD,EAAUE,SAClBC,EAAWH,EAAUI,KACrBC,EAAOL,EAAUK,KACrB,GAAwB,iBAAbF,IAA0BA,GAA6B,iBAAVF,EACtD,MAAO,GAQT,GALAA,EAAQA,EAAMK,MAAM,IAAK,GAAG,IA6B9B,SAAqBH,EAAUE,GAC7B,IAAIE,GACDhB,EAAO,wBAA0BA,EAAO,aAAaI,cACxD,IAAKY,EACH,OAAO,EAET,GAAiB,MAAbA,EACF,OAAO,EAGT,OAAOA,EAASD,MAAM,SAASE,OAAM,SAASC,GAC5C,IAAKA,EACH,OAAO,EAET,IAAIC,EAAcD,EAAME,MAAM,gBAC1BC,EAAsBF,EAAcA,EAAY,GAAKD,EACrDI,EAAkBH,EAAcI,SAASJ,EAAY,IAAM,EAC/D,SAAIG,GAAmBA,IAAoBR,KAItC,QAAQU,KAAKH,IAKoB,MAAlCA,EAAoBI,OAAO,KAE7BJ,EAAsBA,EAAoBK,MAAM,KAG1ClC,EAAemC,KAAKf,EAAUS,IAR7BT,IAAaS,MA/CnBO,CAFLhB,EAAWA,EAASiB,QAAQ,QAAS,IACrCf,EAAOS,SAAST,IAAS7B,EAAcyB,IAAU,GAE/C,MAAO,GAGT,IAAIQ,EACFlB,EAAO,cAAgBU,EAAQ,WAC/BV,EAAOU,EAAQ,WACfV,EAAO,qBACPA,EAAO,aAKT,OAJIkB,IAAmC,IAA1BA,EAAMnB,QAAQ,SAEzBmB,EAAQR,EAAQ,MAAQQ,GAEnBA"}