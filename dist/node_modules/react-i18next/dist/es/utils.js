const e=(e,n,a,i)=>{const o=[a,{code:n,...i||{}}];if(e?.services?.logger?.forward)return e.services.logger.forward(o,"warn","react-i18next::",!0);r(o[0])&&(o[0]=`react-i18next:: ${o[0]}`),e?.services?.logger?.warn?e.services.logger.warn(...o):console?.warn&&console.warn(...o)},n={},a=(a,i,o,s)=>{r(o)&&n[o]||(r(o)&&(n[o]=new Date),e(a,i,o,s))},i=(e,n)=>()=>{if(e.isInitialized)n();else{const a=()=>{setTimeout((()=>{e.off("initialized",a)}),0),n()};e.on("initialized",a)}},o=(e,n,a)=>{e.loadNamespaces(n,i(e,a))},s=(e,n,a,s)=>{if(r(a)&&(a=[a]),e.options.preload&&e.options.preload.indexOf(n)>-1)return o(e,a,s);a.forEach((n=>{e.options.ns.indexOf(n)<0&&e.options.ns.push(n)})),e.loadLanguages(n,i(e,s))},g=(e,n,i={})=>n.languages&&n.languages.length?n.hasLoadedNamespace(e,{lng:i.lng,precheck:(n,a)=>{if(i.bindI18n&&i.bindI18n.indexOf("languageChanging")>-1&&n.services.backendConnector.backend&&n.isLanguageChangingTo&&!a(n.isLanguageChangingTo,e))return!1}}):(a(n,"NO_LANGUAGES","i18n.languages were undefined or empty",{languages:n.languages}),!0),r=e=>"string"==typeof e,t=e=>"object"==typeof e&&null!==e;export{g as hasLoadedNamespace,t as isObject,r as isString,s as loadLanguages,o as loadNamespaces,e as warn,a as warnOnce};
//# sourceMappingURL=utils.js.map
