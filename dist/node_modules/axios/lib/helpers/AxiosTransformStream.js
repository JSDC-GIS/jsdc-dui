import e from"stream";import t from"../utils.js";const n=Symbol("internals");class s extends e.Transform{constructor(e){super({readableHighWaterMark:(e=t.toFlatObject(e,{maxRate:0,chunkSize:65536,minChunkSize:100,timeWindow:500,ticksRate:2,samplesCount:15},null,((e,n)=>!t.isUndefined(n[e])))).chunkSize});const s=this[n]={timeWindow:e.timeWindow,chunkSize:e.chunkSize,maxRate:e.maxRate,minChunkSize:e.minChunkSize,bytesSeen:0,isCaptured:!1,notifiedBytesLoaded:0,ts:Date.now(),bytes:0,onReadCallback:null};this.on("newListener",(e=>{"progress"===e&&(s.isCaptured||(s.isCaptured=!0))}))}_read(e){const t=this[n];return t.onReadCallback&&t.onReadCallback(),super._read(e)}_transform(e,t,s){const a=this[n],i=a.maxRate,r=this.readableHighWaterMark,o=a.timeWindow,u=i/(1e3/o),l=!1!==a.minChunkSize?Math.max(a.minChunkSize,.01*u):0,c=(e,t)=>{const n=Buffer.byteLength(e);a.bytesSeen+=n,a.bytes+=n,a.isCaptured&&this.emit("progress",a.bytesSeen),this.push(e)?process.nextTick(t):a.onReadCallback=()=>{a.onReadCallback=null,process.nextTick(t)}},m=(e,t)=>{const n=Buffer.byteLength(e);let s,m=null,d=r,h=0;if(i){const e=Date.now();(!a.ts||(h=e-a.ts)>=o)&&(a.ts=e,s=u-a.bytes,a.bytes=s<0?-s:0,h=0),s=u-a.bytes}if(i){if(s<=0)return setTimeout((()=>{t(null,e)}),o-h);s<d&&(d=s)}d&&n>d&&n-d>l&&(m=e.subarray(d),e=e.subarray(0,d)),c(e,m?()=>{process.nextTick(t,null,m)}:t)};m(e,(function e(t,n){if(t)return s(t);n?m(n,e):s(null)}))}}var a=s;export{a as default};
//# sourceMappingURL=AxiosTransformStream.js.map
