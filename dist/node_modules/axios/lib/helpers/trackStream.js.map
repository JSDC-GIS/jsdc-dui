{"version":3,"file":"trackStream.js","sources":["../../../../../node_modules/axios/lib/helpers/trackStream.js"],"sourcesContent":["\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n"],"names":["streamChunk","chunk","chunkSize","len","byteLength","end","pos","slice","readBytes","async","iterable","readStream","stream","Symbol","asyncIterator","reader","getReader","done","value","read","cancel","trackStream","onProgress","onFinish","iterator","bytes","_onFinish","e","ReadableStream","controller","next","close","loadedBytes","enqueue","Uint8Array","err","reason","return","highWaterMark"],"mappings":"AACY,MAACA,EAAc,UAAWC,EAAOC,GAC3C,IAAIC,EAAMF,EAAMG,WAEhB,IAAKF,GAAaC,EAAMD,EAEtB,kBADMD,GAIR,IACII,EADAC,EAAM,EAGV,KAAOA,EAAMH,GACXE,EAAMC,EAAMJ,QACND,EAAMM,MAAMD,EAAKD,GACvBC,EAAMD,GAIGG,EAAYC,gBAAiBC,EAAUR,GAClD,UAAW,MAAMD,KAASU,EAAWD,SAC5BV,EAAYC,EAAOC,IAIxBS,EAAaF,gBAAiBG,GAClC,GAAIA,EAAOC,OAAOC,eAEhB,kBADOF,GAIT,MAAMG,EAASH,EAAOI,YACtB,IACE,OAAS,CACP,MAAMC,KAACA,EAAIC,MAAEA,SAAeH,EAAOI,OACnC,GAAIF,EACF,YAEIC,GAEA,cACFH,EAAOK,WAIJC,EAAc,CAACT,EAAQV,EAAWoB,EAAYC,KACzD,MAAMC,EAAWhB,EAAUI,EAAQV,GAEnC,IACIe,EADAQ,EAAQ,EAERC,EAAaC,IACVV,IACHA,GAAO,EACPM,GAAYA,EAASI,KAIzB,OAAO,IAAIC,eAAe,CACxBnB,WAAWoB,GACT,IACE,MAAMZ,KAACA,EAAIC,MAAEA,SAAeM,EAASM,OAErC,GAAIb,EAGF,OAFDS,SACCG,EAAWE,QAIb,IAAI5B,EAAMe,EAAMd,WAChB,GAAIkB,EAAY,CACd,IAAIU,EAAcP,GAAStB,EAC3BmB,EAAWU,GAEbH,EAAWI,QAAQ,IAAIC,WAAWhB,IAClC,MAAOiB,GAEP,MADAT,EAAUS,GACJA,IAGVf,OAAOgB,IACLV,EAAUU,GACHZ,EAASa,WAEjB,CACDC,cAAe"}