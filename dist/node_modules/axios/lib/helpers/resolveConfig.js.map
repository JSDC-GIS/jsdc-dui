{"version":3,"file":"resolveConfig.js","sources":["../../../../../node_modules/axios/lib/helpers/resolveConfig.js"],"sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // browser handles it\n    } else if (utils.isFunction(data.getHeaders)) {\n      // Node.js FormData (like form-data package)\n      const formHeaders = data.getHeaders();\n      // Only set safe headers to avoid overwriting security headers\n      const allowedHeaders = ['content-type', 'content-length'];\n      Object.entries(formHeaders).forEach(([key, val]) => {\n        if (allowedHeaders.includes(key.toLowerCase())) {\n          headers.set(key, val);\n        }\n      });\n    }\n  }  \n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n"],"names":["resolveConfig","config","newConfig","mergeConfig","data","withXSRFToken","xsrfHeaderName","xsrfCookieName","headers","auth","AxiosHeaders","from","url","buildURL","buildFullPath","baseURL","allowAbsoluteUrls","params","paramsSerializer","set","btoa","username","password","unescape","encodeURIComponent","utils","isFormData","platform","hasStandardBrowserEnv","hasStandardBrowserWebWorkerEnv","setContentType","undefined","isFunction","getHeaders","formHeaders","allowedHeaders","Object","entries","forEach","key","val","includes","toLowerCase","isURLSameOrigin","xsrfValue","cookies","read"],"mappings":"iRASA,IAAeA,EAACC,IACd,MAAMC,EAAYC,EAAY,GAAIF,GAElC,IAAIG,KAAEA,EAAIC,cAAEA,EAAaC,eAAEA,EAAcC,eAAEA,EAAcC,QAAEA,EAAOC,KAAEA,GAASP,EAa7E,GAXAA,EAAUM,QAAUA,EAAUE,EAAaC,KAAKH,GAEhDN,EAAUU,IAAMC,EAASC,EAAcZ,EAAUa,QAASb,EAAUU,IAAKV,EAAUc,mBAAoBf,EAAOgB,OAAQhB,EAAOiB,kBAGzHT,GACFD,EAAQW,IAAI,gBAAiB,SAC3BC,MAAMX,EAAKY,UAAY,IAAM,KAAOZ,EAAKa,SAAWC,SAASC,mBAAmBf,EAAKa,WAAa,MAIlGG,EAAMC,WAAWtB,GACnB,GAAIuB,EAASC,uBAAyBD,EAASE,+BAC7CrB,EAAQsB,oBAAeC,QAClB,GAAIN,EAAMO,WAAW5B,EAAK6B,YAAa,CAE5C,MAAMC,EAAc9B,EAAK6B,aAEnBE,EAAiB,CAAC,eAAgB,kBACxCC,OAAOC,QAAQH,GAAaI,SAAQ,EAAEC,EAAKC,MACrCL,EAAeM,SAASF,EAAIG,gBAC9BlC,EAAQW,IAAIoB,EAAKC,MAUzB,GAAIb,EAASC,wBACXvB,GAAiBoB,EAAMO,WAAW3B,KAAmBA,EAAgBA,EAAcH,IAE/EG,IAAoC,IAAlBA,GAA2BsC,EAAgBzC,EAAUU,MAAO,CAEhF,MAAMgC,EAAYtC,GAAkBC,GAAkBsC,EAAQC,KAAKvC,GAE/DqC,GACFpC,EAAQW,IAAIb,EAAgBsC,GAKlC,OAAO1C"}