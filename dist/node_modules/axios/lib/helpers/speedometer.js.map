{"version":3,"file":"speedometer.js","sources":["../../../../../node_modules/axios/lib/helpers/speedometer.js"],"sourcesContent":["'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n"],"names":["speedometer","samplesCount","min","bytes","Array","timestamps","firstSampleTS","head","tail","undefined","chunkLength","now","Date","startedAt","i","bytesCount","passed","Math","round"],"mappings":"AAQA,SAASA,EAAYC,EAAcC,GACjCD,EAAeA,GAAgB,GAC/B,MAAME,EAAQ,IAAIC,MAAMH,GAClBI,EAAa,IAAID,MAAMH,GAC7B,IAEIK,EAFAC,EAAO,EACPC,EAAO,EAKX,OAFAN,OAAcO,IAARP,EAAoBA,EAAM,IAEzB,SAAcQ,GACnB,MAAMC,EAAMC,KAAKD,MAEXE,EAAYR,EAAWG,GAExBF,IACHA,EAAgBK,GAGlBR,EAAMI,GAAQG,EACdL,EAAWE,GAAQI,EAEnB,IAAIG,EAAIN,EACJO,EAAa,EAEjB,KAAOD,IAAMP,GACXQ,GAAcZ,EAAMW,KACpBA,GAAQb,EASV,GANAM,GAAQA,EAAO,GAAKN,EAEhBM,IAASC,IACXA,GAAQA,EAAO,GAAKP,GAGlBU,EAAML,EAAgBJ,EACxB,OAGF,MAAMc,EAASH,GAAaF,EAAME,EAElC,OAAOG,EAASC,KAAKC,MAAmB,IAAbH,EAAoBC,QAAUP"}