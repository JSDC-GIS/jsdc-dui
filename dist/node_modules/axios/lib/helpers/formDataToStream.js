import e from"util";import{Readable as t}from"stream";import n from"../utils.js";import r from"./readBlob.js";import o from"../platform/index.js";const i=o.ALPHABET.ALPHA_DIGIT+"-_",a="function"==typeof TextEncoder?new TextEncoder:new e.TextEncoder,s=a.encode("\r\n");class c{constructor(e,t){const{escapeName:r}=this.constructor,o=n.isString(t);let i=`Content-Disposition: form-data; name="${r(e)}"${!o&&t.name?`; filename="${r(t.name)}"`:""}\r\n`;o?t=a.encode(String(t).replace(/\r?\n|\r\n?/g,"\r\n")):i+=`Content-Type: ${t.type||"application/octet-stream"}\r\n`,this.headers=a.encode(i+"\r\n"),this.contentLength=o?t.byteLength:t.size,this.size=this.headers.byteLength+this.contentLength+2,this.name=e,this.value=t}async*encode(){yield this.headers;const{value:e}=this;n.isTypedArray(e)?yield e:yield*r(e),yield s}static escapeName(e){return String(e).replace(/[\r\n"]/g,(e=>({"\r":"%0D","\n":"%0A",'"':"%22"}[e])))}}var d=(e,r,s)=>{const{tag:d="form-data-boundary",size:m=25,boundary:h=d+"-"+o.generateString(m,i)}=s||{};if(!n.isFormData(e))throw TypeError("FormData instance required");if(h.length<1||h.length>70)throw Error("boundary must be 10-70 characters long");const l=a.encode("--"+h+"\r\n"),y=a.encode("--"+h+"--\r\n");let p=y.byteLength;const u=Array.from(e.entries()).map((([e,t])=>{const n=new c(e,t);return p+=n.size,n}));p+=l.byteLength*u.length,p=n.toFiniteNumber(p);const f={"Content-Type":`multipart/form-data; boundary=${h}`};return Number.isFinite(p)&&(f["Content-Length"]=p),r&&r(f),t.from(async function*(){for(const e of u)yield l,yield*e.encode();yield y}())};export{d as default};
//# sourceMappingURL=formDataToStream.js.map
