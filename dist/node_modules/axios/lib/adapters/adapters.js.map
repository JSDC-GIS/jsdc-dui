{"version":3,"file":"adapters.js","sources":["../../../../../node_modules/axios/lib/adapters/adapters.js"],"sourcesContent":["import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport * as fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: {\n    get: fetchAdapter.getFetch,\n  }\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters, config) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter && (utils.isFunction(adapter) || (adapter = adapter.get(config)))) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n"],"names":["knownAdapters","http","httpAdapter","xhr","xhrAdapter","fetch","get","fetchAdapter.getFetch","utils","forEach","fn","value","Object","defineProperty","e","renderReason","reason","isResolvedHandle","adapter","isFunction","adapters","getAdapter","config","isArray","length","nameOrAdapter","rejectedReasons","i","id","String","toLowerCase","undefined","AxiosError","reasons","entries","map","state","s","join"],"mappings":"uJAMA,MAAMA,EAAgB,CACpBC,KAAMC,EACNC,IAAKC,EACLC,MAAO,CACLC,IAAKC,IAITC,EAAMC,QAAQT,GAAe,CAACU,EAAIC,KAChC,GAAID,EAAI,CACN,IACEE,OAAOC,eAAeH,EAAI,OAAQ,CAACC,MAAAA,IACnC,MAAOG,IAGTF,OAAOC,eAAeH,EAAI,cAAe,CAACC,MAAAA,QAI9C,MAAMI,EAAgBC,GAAW,KAAKA,IAEhCC,EAAoBC,GAAYV,EAAMW,WAAWD,IAAwB,OAAZA,IAAgC,IAAZA,EAEvF,IAAeE,EAAA,CACbC,WAAY,CAACD,EAAUE,KACrBF,EAAWZ,EAAMe,QAAQH,GAAYA,EAAW,CAACA,GAEjD,MAAMI,OAACA,GAAUJ,EACjB,IAAIK,EACAP,EAEJ,MAAMQ,EAAkB,GAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAE/B,IAAIC,EAIJ,GALAH,EAAgBL,EAASO,GAGzBT,EAAUO,GAELR,EAAiBQ,KACpBP,EAAUlB,GAAe4B,EAAKC,OAAOJ,IAAgBK,oBAErCC,IAAZb,GACF,MAAM,IAAIc,EAAW,oBAAoBJ,MAI7C,GAAIV,IAAYV,EAAMW,WAAWD,KAAaA,EAAUA,EAAQZ,IAAIgB,KAClE,MAGFI,EAAgBE,GAAM,IAAMD,GAAKT,EAGnC,IAAKA,EAAS,CAEZ,MAAMe,EAAUrB,OAAOsB,QAAQR,GAC5BS,KAAI,EAAEP,EAAIQ,KAAW,WAAWR,OACpB,IAAVQ,EAAkB,sCAAwC,mCAG/D,IAAIC,EAAIb,EACLS,EAAQT,OAAS,EAAI,YAAcS,EAAQE,IAAIpB,GAAcuB,KAAK,MAAQ,IAAMvB,EAAakB,EAAQ,IACtG,0BAEF,MAAM,IAAID,EACR,wDAA0DK,EAC1D,mBAIJ,OAAOnB,GAETE,SAAUpB"}