import t from"../utils.js";import e from"./http.js";import r from"./xhr.js";import{getFetch as o}from"./fetch.js";import n from"../core/AxiosError.js";const i={http:e,xhr:r,fetch:{get:o}};t.forEach(i,((t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch(t){}Object.defineProperty(t,"adapterName",{value:e})}}));const a=t=>`- ${t}`,s=e=>t.isFunction(e)||null===e||!1===e;var p={getAdapter:(e,r)=>{e=t.isArray(e)?e:[e];const{length:o}=e;let p,c;const f={};for(let a=0;a<o;a++){let o;if(p=e[a],c=p,!s(p)&&(c=i[(o=String(p)).toLowerCase()],void 0===c))throw new n(`Unknown adapter '${o}'`);if(c&&(t.isFunction(c)||(c=c.get(r))))break;f[o||"#"+a]=c}if(!c){const t=Object.entries(f).map((([t,e])=>`adapter ${t} `+(!1===e?"is not supported by the environment":"is not available in the build")));let e=o?t.length>1?"since :\n"+t.map(a).join("\n"):" "+a(t[0]):"as no adapter specified";throw new n("There is no suitable adapter to dispatch the request "+e,"ERR_NOT_SUPPORT")}return c},adapters:i};export{p as default};
//# sourceMappingURL=adapters.js.map
