{"version":3,"file":"dispatchRequest.js","sources":["../../../../../node_modules/axios/lib/core/dispatchRequest.js"],"sourcesContent":["'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter, config);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n"],"names":["throwIfCancellationRequested","config","cancelToken","throwIfRequested","signal","aborted","CanceledError","dispatchRequest","headers","AxiosHeaders","from","data","transformData","call","transformRequest","indexOf","method","setContentType","adapters","getAdapter","adapter","defaults","then","response","transformResponse","reason","isCancel","Promise","reject"],"mappings":"6NAgBA,SAASA,EAA6BC,GAKpC,GAJIA,EAAOC,aACTD,EAAOC,YAAYC,mBAGjBF,EAAOG,QAAUH,EAAOG,OAAOC,QACjC,MAAM,IAAIC,EAAc,KAAML,GAWnB,SAASM,EAAgBN,GACtCD,EAA6BC,GAE7BA,EAAOO,QAAUC,EAAaC,KAAKT,EAAOO,SAG1CP,EAAOU,KAAOC,EAAcC,KAC1BZ,EACAA,EAAOa,mBAGgD,IAArD,CAAC,OAAQ,MAAO,SAASC,QAAQd,EAAOe,SAC1Cf,EAAOO,QAAQS,eAAe,qCAAqC,GAKrE,OAFgBC,EAASC,WAAWlB,EAAOmB,SAAWC,EAASD,QAASnB,EAEjEmB,CAAQnB,GAAQqB,MAAK,SAA6BC,GAYvD,OAXAvB,EAA6BC,GAG7BsB,EAASZ,KAAOC,EAAcC,KAC5BZ,EACAA,EAAOuB,kBACPD,GAGFA,EAASf,QAAUC,EAAaC,KAAKa,EAASf,SAEvCe,KACN,SAA4BE,GAe7B,OAdKC,EAASD,KACZzB,EAA6BC,GAGzBwB,GAAUA,EAAOF,WACnBE,EAAOF,SAASZ,KAAOC,EAAcC,KACnCZ,EACAA,EAAOuB,kBACPC,EAAOF,UAETE,EAAOF,SAASf,QAAUC,EAAaC,KAAKe,EAAOF,SAASf,WAIzDmB,QAAQC,OAAOH"}