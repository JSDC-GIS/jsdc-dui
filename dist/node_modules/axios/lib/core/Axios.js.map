{"version":3,"file":"Axios.js","sources":["../../../../../node_modules/axios/lib/core/Axios.js"],"sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig || {};\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.allowAbsoluteUrls\n    if (config.allowAbsoluteUrls !== undefined) {\n      // do nothing\n    } else if (this.defaults.allowAbsoluteUrls !== undefined) {\n      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n    } else {\n      config.allowAbsoluteUrls = true;\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift(...requestInterceptorChain);\n      chain.push(...responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n"],"names":["validators","validator","Axios","constructor","instanceConfig","this","defaults","interceptors","request","InterceptorManager","response","async","configOrUrl","config","_request","err","Error","dummy","captureStackTrace","stack","replace","String","endsWith","e","url","mergeConfig","transitional","paramsSerializer","headers","undefined","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","clarifyTimeoutError","utils","isFunction","serialize","encode","function","allowAbsoluteUrls","baseUrl","spelling","withXsrfToken","method","toLowerCase","contextHeaders","merge","common","forEach","AxiosHeaders","concat","requestInterceptorChain","synchronousRequestInterceptors","interceptor","runWhen","synchronous","unshift","fulfilled","rejected","responseInterceptorChain","promise","push","len","i","chain","dispatchRequest","bind","length","Promise","resolve","then","newConfig","onFulfilled","onRejected","error","call","reject","getUri","fullPath","buildFullPath","baseURL","buildURL","params","prototype","data","generateHTTPMethod","isForm","Axios$1"],"mappings":"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"}