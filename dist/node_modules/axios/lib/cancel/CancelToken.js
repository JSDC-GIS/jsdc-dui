import s from"./CanceledError.js";class e{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(s){t=s}));const n=this;this.promise.then((s=>{if(!n._listeners)return;let e=n._listeners.length;for(;e-- >0;)n._listeners[e](s);n._listeners=null})),this.promise.then=s=>{let e;const t=new Promise((s=>{n.subscribe(s),e=s})).then(s);return t.cancel=function(){n.unsubscribe(e)},t},e((function(e,r,i){n.reason||(n.reason=new s(e,r,i),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(s){this.reason?s(this.reason):this._listeners?this._listeners.push(s):this._listeners=[s]}unsubscribe(s){if(!this._listeners)return;const e=this._listeners.indexOf(s);-1!==e&&this._listeners.splice(e,1)}toAbortSignal(){const s=new AbortController,e=e=>{s.abort(e)};return this.subscribe(e),s.signal.unsubscribe=()=>this.unsubscribe(e),s.signal}static source(){let s;return{token:new e((function(e){s=e})),cancel:s}}}var t=e;export{t as default};
//# sourceMappingURL=CancelToken.js.map
