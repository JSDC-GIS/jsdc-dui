{"version":3,"file":"parallel.js","sources":["../../../node_modules/asynckit/parallel.js"],"sourcesContent":["var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n"],"names":["iterate","require$$0","initState","require$$1","terminator","require$$2","parallel_1","list","iterator","callback","state","index","length","error","result","Object","keys","jobs","results","bind"],"mappings":"iGAAA,IAAIA,EAAaC,EACbC,EAAaC,EACbC,EAAaC,EAIjBC,EAUA,SAAkBC,EAAMC,EAAUC,GAEhC,IAAIC,EAAQR,EAAUK,GAEtB,KAAOG,EAAMC,OAASD,EAAiB,WAAKH,GAAMK,QAEhDZ,EAAQO,EAAMC,EAAUE,GAAO,SAASG,EAAOC,GAEzCD,EAEFJ,EAASI,EAAOC,GAKqB,IAAnCC,OAAOC,KAAKN,EAAMO,MAAML,QAE1BH,EAAS,KAAMC,EAAMQ,YAKzBR,EAAMC,QAGR,OAAOP,EAAWe,KAAKT,EAAOD"}